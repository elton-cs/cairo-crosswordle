// Generated by dojo-bindgen on Sat, 10 Aug 2024 21:23:30 +0000. Do not modify this file manually.
use bevy::prelude::*;
#[derive(Debug, Component)]
pub struct Letter {
    pub position: u8,
    pub hash: starknet::core::types::Felt,
    pub placed_by: cainome::cairo_serde::ContractAddress,
}
impl cainome::cairo_serde::CairoSerde for Letter {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += u8::cairo_serialized_size(&__rust.position);
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.hash);
        __size += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&__rust.placed_by);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(u8::cairo_serialize(&__rust.position));
        __out.extend(starknet::core::types::Felt::cairo_serialize(&__rust.hash));
        __out.extend(cainome::cairo_serde::ContractAddress::cairo_serialize(
            &__rust.placed_by,
        ));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let position = u8::cairo_deserialize(__felts, __offset)?;
        __offset += u8::cairo_serialized_size(&position);
        let hash = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&hash);
        let placed_by =
            cainome::cairo_serde::ContractAddress::cairo_deserialize(__felts, __offset)?;
        __offset += cainome::cairo_serde::ContractAddress::cairo_serialized_size(&placed_by);
        Ok(Letter {
            position,
            hash,
            placed_by,
        })
    }
}
#[derive(Debug, Component)]
pub struct FieldLayout {
    pub selector: starknet::core::types::Felt,
    pub layout: Layout,
}
impl cainome::cairo_serde::CairoSerde for FieldLayout {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        let mut __size = 0;
        __size += starknet::core::types::Felt::cairo_serialized_size(&__rust.selector);
        __size += Layout::cairo_serialized_size(&__rust.layout);
        __size
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        let mut __out: Vec<starknet::core::types::Felt> = vec![];
        __out.extend(starknet::core::types::Felt::cairo_serialize(
            &__rust.selector,
        ));
        __out.extend(Layout::cairo_serialize(&__rust.layout));
        __out
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let mut __offset = __offset;
        let selector = starknet::core::types::Felt::cairo_deserialize(__felts, __offset)?;
        __offset += starknet::core::types::Felt::cairo_serialized_size(&selector);
        let layout = Layout::cairo_deserialize(__felts, __offset)?;
        __offset += Layout::cairo_serialized_size(&layout);
        Ok(FieldLayout { selector, layout })
    }
}
#[derive(Debug, Component)]
pub enum Layout {
    Fixed(Vec<u8>),
    Struct(Vec<FieldLayout>),
    Tuple(Vec<Layout>),
    Array(Vec<Layout>),
    ByteArray,
    Enum(Vec<FieldLayout>),
}
impl cainome::cairo_serde::CairoSerde for Layout {
    type RustType = Self;
    const SERIALIZED_SIZE: std::option::Option<usize> = std::option::Option::None;
    #[inline]
    fn cairo_serialized_size(__rust: &Self::RustType) -> usize {
        match __rust {
            Layout::Fixed(val) => Vec::<u8>::cairo_serialized_size(val) + 1,
            Layout::Struct(val) => Vec::<FieldLayout>::cairo_serialized_size(val) + 1,
            Layout::Tuple(val) => Vec::<Layout>::cairo_serialized_size(val) + 1,
            Layout::Array(val) => Vec::<Layout>::cairo_serialized_size(val) + 1,
            Layout::ByteArray => 1,
            Layout::Enum(val) => Vec::<FieldLayout>::cairo_serialized_size(val) + 1,
            _ => 0,
        }
    }
    fn cairo_serialize(__rust: &Self::RustType) -> Vec<starknet::core::types::Felt> {
        match __rust {
            Layout::Fixed(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&0usize));
                temp.extend(Vec::<u8>::cairo_serialize(val));
                temp
            }
            Layout::Struct(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&1usize));
                temp.extend(Vec::<FieldLayout>::cairo_serialize(val));
                temp
            }
            Layout::Tuple(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&2usize));
                temp.extend(Vec::<Layout>::cairo_serialize(val));
                temp
            }
            Layout::Array(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&3usize));
                temp.extend(Vec::<Layout>::cairo_serialize(val));
                temp
            }
            Layout::ByteArray => usize::cairo_serialize(&4usize),
            Layout::Enum(val) => {
                let mut temp = vec![];
                temp.extend(usize::cairo_serialize(&5usize));
                temp.extend(Vec::<FieldLayout>::cairo_serialize(val));
                temp
            }
            _ => vec![],
        }
    }
    fn cairo_deserialize(
        __felts: &[starknet::core::types::Felt],
        __offset: usize,
    ) -> cainome::cairo_serde::Result<Self::RustType> {
        let __f = __felts[__offset];
        let __index = u128::from_be_bytes(__f.to_bytes_be()[16..].try_into().unwrap());
        match __index as usize {
            0usize => Ok(Layout::Fixed(Vec::<u8>::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            1usize => Ok(Layout::Struct(Vec::<FieldLayout>::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            2usize => Ok(Layout::Tuple(Vec::<Layout>::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            3usize => Ok(Layout::Array(Vec::<Layout>::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            4usize => Ok(Layout::ByteArray),
            5usize => Ok(Layout::Enum(Vec::<FieldLayout>::cairo_deserialize(
                __felts,
                __offset + 1,
            )?)),
            _ => {
                return Err(cainome::cairo_serde::Error::Deserialize(format!(
                    "Index not handle for enum {}",
                    "Layout"
                )))
            }
        }
    }
}
